<?php

namespace jakharbek\posts\models;

use jakharbek\posts\behaviors\UserBehavior;
use Yii;
use \yii\db\ActiveRecord;
use jakharbek\langs\models\Langs;
use jakharbek\users\models\Users;
use jakharbek\langs\components\ModelBehavior;
use yii\helpers\ArrayHelper;
use yii\behaviors\SluggableBehavior;
use jakharbek\posts\behaviors\DateTimeBehavior;
use jakharbek\categories\behaviors\CategoryModelBehavior;
use jakharbek\categories\models\Categories;

/**
 * This is the model class for table "posts".
 *
 * @property int $post_id Идентификатор поста
 * @property string $title Зоголовок
 * @property string $subtitle Под заголовок поста
 * @property string $description Описание
 * @property string $content Контент
 * @property string $slug Слаг поста
 * @property int $sort Сортировка
 * @property string $date_update Дата побновление поста
 * @property string $date_create Дата добавление поста
 * @property string $date_publish Дата публикации поста
 * @property int $status Статус
 * @property string $lang_hash Хеш языка
 * @property int $lang Язык
 * @property int $user_id Пользователь
 *
 * @property Langs $lang0
 * @property Users $user
 * @property Postscastings[] $postscastings
 * @property Castings[] $castings
 * @property Postsimages[] $postsimages
 * @property Images[] $images
 * @property Postsimagesposter[] $postsimagesposters
 * @property Images[] $images0
 * @property Postspages[] $postspages
 * @property Pages[] $pages
 * @property Postspersons[] $postspersons
 * @property Persons[] $people
 * @property Postsserials[] $postsserials
 * @property Serials[] $serials
 * @property Poststopics[] $poststopics
 * @property Topics[] $topics
 * @property Poststvprogrammes[] $poststvprogrammes
 * @property Tvprogrammes[] $tvprograms
 * @property Poststvprojects[] $poststvprojects
 * @property Tvprojects[] $tvprojects
 * @property Postsvideos[] $postsvideos
 * @property Videos[] $videos
 * @property Postsvideosposter[] $postsvideosposters
 * @property Videos[] $videos0
 */
class Posts extends ActiveRecord
{
    const SCENARIO_SEARCH = "search";
    const STATUS_ACTIVE = 1;

    public $_categoriesform;

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(),[
            'lang' => [
                'class' => ModelBehavior::className(),
            ],
            'date_filter' => [
                'class' => \yii\behaviors\TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['date_create', 'date_update','date_publish'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['date_update'],
                ],
            ],
            'date_publish_date' => [
                'class' => DateTimeBehavior::className(),
                'attribute' => 'date_publish', //атрибут модели, который будем менять
                'format'         => 'dd.MM.yyyy',   //формат вывода даты для пользователя
                'disableScenarios' => [self::SCENARIO_SEARCH],
            ],
            'date_update_date' => [
                'class' => DateTimeBehavior::className(),
                'attribute' => 'date_update', //атрибут модели, который будем менять
                'format'         => 'dd.MM.yyyy',   //формат вывода даты для пользователя
                'disableScenarios' => [self::SCENARIO_SEARCH],
            ],
            'date_create_date' => [
                'class' => DateTimeBehavior::className(),
                'attribute' => 'date_create', //атрибут модели, который будем менять
                'format'         => 'dd.MM.yyyy',   //формат вывода даты для пользователя
                'disableScenarios' => [self::SCENARIO_SEARCH],
            ],
            'slug' => [
                'class' => 'Zelenin\yii\behaviors\Slug',
                'slugAttribute' => 'slug',
                'attribute' => 'title',
                // optional params
                'ensureUnique' => true,
                'replacement' => '-',
                'lowercase' => true,
                'immutable' => false,
                'transliterateOptions' => 'Russian-Latin/BGN; Any-Latin; Latin-ASCII; NFD; [:Nonspacing Mark:] Remove; NFC;'
            ],
            'login' => [
                'class' => UserBehavior::className(),
                'attribute' => 'user_id',
                'user_id'=> 'user_id',
            ],
            'category_model'=> [
                'class' => CategoryModelBehavior::className(),
                'attribute' => 'categoriesform',
                'separator' => ',',
            ],
        ]); // TODO: Change the autogenerated stub

    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'posts';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['description', 'content'], 'string'],
            [['sort', 'status', 'lang', 'user_id'], 'default', 'value' => null],
            [['sort', 'status', 'lang', 'user_id'], 'integer'],
            [['date_update', 'date_create', 'date_publish'], 'required'],
            [['date_update', 'date_create', 'date_publish','categoriesform'], 'safe'],
            [['title', 'subtitle'], 'string', 'max' => 500],
            [['slug'], 'string', 'max' => 600],
            [['lang_hash'], 'string', 'max' => 255],
            [['slug'], 'unique'],
            [['lang'], 'exist', 'skipOnError' => true, 'targetClass' => Langs::className(), 'targetAttribute' => ['lang' => 'lang_id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::className(), 'targetAttribute' => ['user_id' => 'user_id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'post_id' => Yii::t('jakhar-posts','Post ID'),
            'title' => Yii::t('jakhar-posts','Title'),
            'subtitle' => Yii::t('jakhar-posts','Subtitle'),
            'description' => Yii::t('jakhar-posts','Description'),
            'content' => Yii::t('jakhar-posts','Content'),
            'slug' => Yii::t('jakhar-posts','Slug'),
            'sort' => Yii::t('jakhar-posts','Sort'),
            'date_update' => Yii::t('jakhar-posts','Date update'),
            'date_create' => Yii::t('jakhar-posts','Date create'),
            'date_publish' => Yii::t('jakhar-posts','Date publish'),
            'status' => Yii::t('jakhar-posts','Status'),
            'lang_hash' => Yii::t('jakhar-posts','Lang hash'),
            'lang' => Yii::t('jakhar-posts','Lang'),
            'user_id' => Yii::t('jakhar-posts','User'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLang0()
    {
        return $this->hasOne(Langs::className(), ['lang_id' => 'lang']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(Users::className(), ['user_id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostscastings()
    {
        return $this->hasMany(Postscastings::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCastings()
    {
        return $this->hasMany(Castings::className(), ['casting_id' => 'casting_id'])->viaTable('postscastings', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostsimages()
    {
        return $this->hasMany(Postsimages::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImages()
    {
        return $this->hasMany(Images::className(), ['image_id' => 'image_id'])->viaTable('postsimages', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostsimagesposters()
    {
        return $this->hasMany(Postsimagesposter::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImages0()
    {
        return $this->hasMany(Images::className(), ['image_id' => 'image_id'])->viaTable('postsimagesposter', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostspages()
    {
        return $this->hasMany(Postspages::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPages()
    {
        return $this->hasMany(Pages::className(), ['page_id' => 'page_id'])->viaTable('postspages', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostspersons()
    {
        return $this->hasMany(Postspersons::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPeople()
    {
        return $this->hasMany(Persons::className(), ['person_id' => 'person_id'])->viaTable('postspersons', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostsserials()
    {
        return $this->hasMany(Postsserials::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSerials()
    {
        return $this->hasMany(Serials::className(), ['serial_id' => 'serial_id'])->viaTable('postsserials', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPoststopics()
    {
        return $this->hasMany(Poststopics::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTopics()
    {
        return $this->hasMany(Topics::className(), ['topic_id' => 'topic_id'])->viaTable('poststopics', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPoststvprogrammes()
    {
        return $this->hasMany(Poststvprogrammes::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTvprograms()
    {
        return $this->hasMany(Tvprogrammes::className(), ['tvprogram_id' => 'tvprogram_id'])->viaTable('poststvprogrammes', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPoststvprojects()
    {
        return $this->hasMany(Poststvprojects::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTvprojects()
    {
        return $this->hasMany(Tvprojects::className(), ['tvproject_id' => 'tvproject_id'])->viaTable('poststvprojects', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostsvideos()
    {
        return $this->hasMany(Postsvideos::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getVideos()
    {
        return $this->hasMany(Videos::className(), ['video_id' => 'video_id'])->viaTable('postsvideos', ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostsvideosposters()
    {
        return $this->hasMany(Postsvideosposter::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getVideos0()
    {
        return $this->hasMany(Videos::className(), ['video_id' => 'video_id'])->viaTable('postsvideosposter', ['post_id' => 'post_id']);
    }
    public function getPostscategories()
    {
        return $this->hasMany(Postscategories::className(), ['post_id' => 'post_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategories()
    {
        return $this->hasMany(Categories::className(), ['id' => 'id'])->viaTable('postscategories', ['post_id' => 'post_id']);
    }

    /**
     * @inheritdoc
     * @return PostsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new PostsQuery(get_called_class());
    }

    public function getCategoriesform(){
        return $this->_categoriesform;
    }
    public function setCategoriesform($value){
        return $this->_categoriesform = $value;
    }

}
